#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express:server');
var http = require('http');
var os = require('os');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4444');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
  var interface_net = os.networkInterfaces();
  var addresses = [];
  for (var k in interface_net) {
    for (var k2 in interface_net[k]) {
      var address = interface_net[k][k2];
      if (address.family == 'IPv4' && !address.internal) {
        addresses.push(address.address);
      }
    }
  }
  console.log(addresses + ":" + app.get('port'));
}

process.on('SIGINT', function () {
  console.log('bye bye server');
  const sessionFolder = process.cwd() + '/sessions';
  try {
    fs.rmdirSync(sessionFolder);
    process.exit(0);
  } catch (err) {
    console.log('delete session folder :::: ', err.code);
    if (err.code == 'ENOTEMPTY') {
      console.log('delete first file');
      fs.readdirSync(sessionFolder).forEach(function (file, index) {
        var curPath = sessionFolder + '/' + file;
        fs.unlinkSync(curPath);
      });
    }
    try {
      fs.rmdirSync(sessionFolder);
    } catch (err) {
      console.log('second error code :::; ', err.code);
      console.log('second error ::: ', err);
      process.exit(0);
    }
    process.exit(0);
  }
});