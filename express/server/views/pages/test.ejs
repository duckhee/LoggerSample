<!DOCTYPE html>
<html>
  <head>
    <title>Main</title>
    <% include ../partials/admin/stylesheet.ejs %>
    <!-- Daterange picker -->
<link rel="stylesheet" href="/static/admin/plugins/daterangepicker/daterangepicker.css">
<!-- Date Picker -->
  <link rel="stylesheet" href="/static/admin/plugins/datepicker/datepicker3.css">
  <!-- Daterange picker -->
  <link rel="stylesheet" href="/static/admin/plugins/daterangepicker/daterangepicker.css">
  </head>
  
<body class="hold-transition skin-blue sidebar-mini">
    <div class="wrapper">
        <header class="main-header">
            <!-- Logo -->
            <a href="/" class="logo">
                <!-- mini logo for sidebar mini 50x50 pixels -->
                <span class="logo-mini"><b>C</b>&amp;H</span>
                <!-- logo for regular state and mobile devices -->
                <span class="logo-lg"><b>C &amp; H </b></span>
            </a>
            <!-- Header Navbar: style can be found in header.less -->
            <nav class="navbar navbar-static-top">
                <!-- Sidebar toggle button-->
                 <a href="#" class="sidebar-toggle" data-toggle="offcanvas" role="button">
                        <span class="sr-only">Toggle navigation</span>
                </a>
                <div class="navbar-custom-menu">
                    <ul class="nav navbar-nav">
                        <!-- Tasks: style can be found in dropdown.less -->
                        <!-- header nav 들어가는 부분 -->
                        <% include ../partials/admin/headerNav.ejs %>
                    </ul>
                </div>
            </nav>
        </header>
        <!-- Left side column. contains the logo and sidebar -->
        <aside class="main-sidebar">
            <!-- sidebar: style can be found in sidebar.less -->
            <section class="sidebar">
                <!-- Sidebar user panel -->
                <div class="user-panel">
                    <div class="pull-left image">
                        <img src="/static/images/logo_iot.png" class="img-circle" alt="User Image">
                    </div>
                    <div class="pull-left info">
                        
                        <!-- <a href="#"><i class="fa fa-circle text-success"></i> Online</a> -->
                    </div>
                </div>
                <!-- nav item -->
                <% include ../partials/admin/navItem.ejs %>
                <!-- end nav item -->
            </section>
            <!-- /.sidebar -->
        </aside>
        <!-- Content Wrapper. Contains page content -->
        <div class="content-wrapper">
                <!-- Content Header (Page header) -->
                 <section class="content-header">
                    <h1>
                        Logger <small>Detail Page</small>
                    </h1>
                    <ol class="breadcrumb">
                        <li><a href="/"><i class="fa fa-database"></i> Home</a></li>
                        <li><i class="fa fa-dshboard"></i>Logger</li>
                        <li class="active"><a href="#">detail</a></li>
                    </ol>
                </section> 
            <div class="content">
                <div class="row">
                    <div class="col-md-12">
                        <div class='box'>
                            <div class='box-header'>
                                <h3 class='box-title'>Logger Name</h3>
                                <div class="pull-right">
                                    <div class="btn-group">
                                        <button class="btn btn-primary btn-sm daterange" id="WeatherDataDownload"><i class="fa fa-calendar"></i> Weather Data DownLoad</button>
                                        <button class="btn btn-primary btn-sm daterange" id="LoggerDataDownload"><i class="fa fa-calendar"></i> Logger Data DownLoad</button>
                                    </div>
                                </div>
                              
                                <div class="pull-right ">
                                    <form id="download">
                                        <input type="date" id="startCal" name="startCal" hidden="true">
                                        <input type="date" id="endCal" name="endCal" hidden="true">
                                    </form>
                                </div>
                                <!--./end data colum show data logger data name-->
                            </div>
                            <!--./box-header end-->
                            <div class='box-body'>
                                <div id="WeaterhDataChart" name="WeaterhDataChart"></div>
                                <div id="LoggerDataChart" name="LoggerDataChart"></div>
                            </div>
                            <!--./box-body end-->
                            <div class="box-footer">
                            </div>
                            <!--./box-footer end-->
                        </div>
                        <!--./box end-->
                    </div>
                    <!--./col-md-12 end-->
                </div>
                <!--./row end -->
            </div>
        </div>
    <% include ../partials/admin/footer.ejs %>
    <% include ../partials/admin/footerScript.ejs %>
    <% include ../partials/admin/chartScript.ejs %>
    <!-- daterangepicker -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.11.2/moment.min.js"></script>
<script src="/static/admin/plugins/daterangepicker/daterangepicker.js"></script>
    <script>
    //function Delay
     const Delay = async () => {
        return new Promise(resole => setTimeout(resole, 2));
    };

    //function MakeName Series
    function MakeNameSeries(InsertName){
        let newReturnValue = new Array();
        let returnValue = InsertName.split(',');
        //console.log('retrunValue type ::: ', typeof(returnValue));
        for(var i in returnValue){
            if(i != 0){
                newReturnValue.push(returnValue[i]);
            }
        }
        return newReturnValue;
    }

    //functionn Get Data
    function MakeDataSeries(InsertData, NamesSeries){
        //const re = /[^\,^\-^A-Z^\d(.\d+)^\s]/gi;
        //const re = /^[-]?\d+(?:[.]\d+)?$/;
        const re = /[a-zA-Z]/g;
        //console.log("Make Chart Series (JSON TYPE {name, data}");
        var DataArrayResult = new Array();
        for(var idx = 0; idx<NamesSeries.length;idx++){
            DataArrayResult[idx] = new Array();
            for(var k = 0; k<InsertData.length;k++){
                DataArrayResult[idx][k] = new Array();
            }
        }
        let flag;
        //Insert Data
        for(var i in NamesSeries){
            for(var k in InsertData){
                //console.log(InsertData[k]);
                let GetData = InsertData[k].fullValueData.split(',');
                //DataArrayResult[i][k] = new Array();
                flag = 0;
                for(var k2 in GetData){
                    var x;
                   if(k2 == 0){
                       x = new Date(GetData[k2]).getTime();
                   }else{
                        //var y  = GetData[k2].replace(re, Number(-99999));
                        //console.log('replace y ::: ', y);
                       //console.log('get x value ::: ', x);
                       //console.log('get y value ::: ', y);
                       let y = GetData[k2];
                       //console.log('get Flag Test ::: '+ flag+", get K2 Value ::: "+k2);
                       DataArrayResult[i][k] = ([x, y]);
                       //console.log('Get Checking DataArrayResult :::: ', DataArrayResult[flag][k]);
                       //console.log('get Data Array Result Check :::: ', DataArrayResult[i][k]);
                       //console.log("get Data Name ::: ", NamesSeries[i]);
                       //console.log("Get Y Data Check :::: ", y);
                       //DataArrayResult[i][k] = y;
                       flag++;
                   }
                }
            }
            //console.log('Checking I Value ::: ', i);
        }
        
        return DataArrayResult;
    }
    //async function MakeDataSeries(InsertData, NamesSeries){
    async function MakeDataSeriesTest(InsertData, NamesSeries, callback){
        
        //const re = /[^\,^\-^A-Z^\d(.\d+)^\s]/gi;
        //const re = /^[-]?\d+(?:[.]\d+)?$/;
        const re = /[a-zA-Z]/g;
        //console.log("Make Chart Series (JSON TYPE {name, data}");
        //let NameJson = {};
        //console.log('insert data length::: ', InsertData.length);
        let DataArrayResult = new Array();
        for(var idx = 0; idx<NamesSeries.length;idx++){
            DataArrayResult[idx] = new Array();
            for(var k in InsertData){
                DataArrayResult[i][k] = new Array();
            }
        }
        
        //let DataArrayResult = [NamesSeries.length][InsertData.length];
        //Insert Data
        for(var i in NamesSeries){
            //NameJson.name = NamesSeries[i];
            //console.log('Data Names ', NamesSeries[i]);
            for(var k in InsertData){
                //console.log(InsertData[k]);
                let GetData = InsertData[k].fullValueData.split(',');
                //DataArrayResult[i][k] = new Array();
                let DataFlag = 0;
                for(var k2 in GetData){
                    var x;
                   if(k2 == 0){
                       //console.log('get data time :::: ', GetData[k2]);
                       x = new Date(GetData[k2]).getTime();
                       //DataArrayResult[i][k] = ([x, y]);
                   }else{
                        //var y  = GetData[k2].replace(re, Number(-99999));
                        //console.log('replace y ::: ', y);
                       //console.log('get x value ::: ', x);
                       //console.log('get y value ::: ', y);
                       let y = GetData[k2];
                       //DataArrayResult[i][k] = y;
                       DataArrayResult[DataFlag][k] = [x, y];
                       DataFlag++;
                       //DataArrayResult[i][k] = ([x, GetData[k2]]);
                       //console.log("get Data Name ::: ", NamesSeries[i]);
                       //console.log("Get Y Data Check :::: ", y);
                       //console.log("get Data :::: ", DataArrayResult[i][k]);
                   }
                   //if else end
                }
                //Parse Data end
                await Delay()
            }
            //All Data end
        }
        //console.log("Return callback value ::: ", DataArrayResult);
        return callback(DataArrayResult);
        //return DataArrayResult;
    }
    //function make json 
    function MakeJson(NameSeries, DataSeries){
        //console.log("Name Series Length :: "+NameSeries.length+"Data Series Length ::: "+DataSeries.length);
        var Series = new Array();
        for(var i in NameSeries){
            //console.log("Make Json Get Data ::: ", DataSeries[i]);
            let SeriesJson = {
                name:NameSeries[i],
                //type:'area',
                data:DataSeries[i]
            };
            console.log('Checking Json ::: ',SeriesJson);
            Series.push(SeriesJson);
        }
        //console.log("Return T2 ::: ", DataSeries[0]);
        //console.log('return json :::: ', Series);
        return Series;
    }
    //function Testing Value
    function TestingValue(data){
        var GetResult = data;
        console.log('Testing ');
        let Names = MakeNameSeries(data.LoggerName.fullNameData);
        console.log('get Name done');
        MakeDataSeriesTest(data.LoggerData, Names, (callback)=>{
            console.log('Start ')
            if(callback){
                let Series = MakeJson(Names,Datas);
                for(var i in Series){
                    console.log('Testing ');
                    chart.appendSeries(Series[i]);
                }
            }
        });
    }
    //update Data Series
    function SeriesTesting(chart){
        $.ajax({
            type:'GET',
            url:'/test/testingData?no=1',
            dataType:'json',
            error:function(){
                return null;
            },success:function(data){
                var GetData = data;
                let Series = new Array();
                console.log("Get Data :::: ", GetData);
                let Names = GetData.NameValue;
                let Data = GetData.DataValue;
                for(let i in Names){
                    console.log("Names ::: ", Names[i]);
                    console.log('Get Data Value ::: ', Data[i]);
                  
                    let ReturnValue = {
                        name:Names[i],
                        data:Data[i]
                    };
                    Series.push(ReturnValue);
                }
                console.log("Make Series :::: ", Series);
                for(let i in Series){
                    chart.appendSeries(Series[i]);
                }
                
                for(let i in Series){
                    chart.toggleSeries(Names[i])
                }
            }
        })
    }

    //Make chart 
    function WeatherChart(){
        var options = {
            chart:{
                height:350,
                id:'weater',
                type:'area',
                //opstion stacked is add y value show
                stacked:false,
                events:{
                    selection:function(chart, e){
                        console.log(new Date(e.xaxis.min))
                    }
                },
            },
            title:{
                text:'Weather Data Chart',
            },
            colors:['#008ffb'],
            dataLabels:{
                enabled:false
            },
            stroke:{
                curve:'smooth'
            },
            series:[],
            fill:{
                type:'gradient',
                gradient:{
                    opacityFrom:0.6,
                    opacityTo:0.8,
                }
            },
            legend:{
                position:'bottom',
                horizontalAlign:'left',
                
            },
            xaxis:{
                type:'datetime',
            },
            tooltip:{
                x:{
                    format:'yy/MM/dd HH:mm'
                },
            }
        }
        var chart = new ApexCharts(document.querySelector("#WeaterhDataChart"),options);
        chart.render();
        
        return chart;
    }
    //Make chart 
    function LoggerChart(){
        var options = {
            chart:{
                height:350,
                id:'logger',
                type:'area',
                stacked:false,
                events:{
                    selection:function(chart, e){
                        console.log(new Date(e.xaxis.min))
                    }
                },
            },
            title:{
                text:'Logger Data Chart',
            },
            colors:['#008ffb'],
            dataLabels:{
                enabled:false
            },
            stroke:{
                curve:'smooth'
            },
            series:[],
            fill:{
                type:'gradient',
                gradient:{
                    opacityFrom:0.6,
                    opacityTo:0.8,
                }
            },
            legend:{
                postion:'top',
                horizontalAlign:'left'
            },
            xaxis:{
                type:'datetime',
            },
            tooltip:{
                x:{
                    format:'dd/MM/yy HH:mm'
                },
            }
        }
        var chart = new ApexCharts(document.querySelector("#LoggerDataChart"),options);
        chart.render();
        return chart;
    }
    
    //DataRange Logger
    function LoggerDownLoad(){
        $("#LoggerDataDownload").daterangepicker({
            opens:'left',
            startDate:moment().subtract(29, 'days'),
            endDate:moment(),
            ranges:{
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
            }
        }, function(start, end){
            console.log(start.format('MM/DD/YYYY') + ' - ' + end.format('MM/DD/YYYY'));
            $("#startCal").val(start.format('YYYY-MM-DD'));
            $("#endCal").val(end.format('YYYY-MM-DD'));
            console.log('hidden value start :::: '+$("#startCal").val()+", hidden value end ::: "+$("#endCal").val())
        });
    }
    //DataRange Weather
    function WeaterDownload(){
        $("#WeatherDataDownload").daterangepicker({
            opens:'left',
            startDate:moment().subtract(29, 'days'),
            endDate:moment(),
            ranges:{
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
            }
        }, function(start, end){
            console.log(start.format('MM/DD/YYYY') + ' - ' + end.format('MM/DD/YYYY'));
            $("#startCal").val(start.format('YYYY-MM-DD'));
            $("#endCal").val(end.format('YYYY-MM-DD'));
            console.log('hidden value start :::: '+$("#startCal").val()+", hidden value end ::: "+$("#endCal").val())
        });
    }
    
    //Ready do
     $(document).ready(function(){
         //let Dating = GetData();
         //console.log('Get Testing ::: ', Dating);
         //WeatherChart();
         const Weather = WeatherChart();
         SeriesTesting(Weather);
         const Logger = LoggerChart();
         LoggerDownLoad();
         WeaterDownload();
         
     });
    </script>
  </body>
</html>;